<?xml version="1.0" encoding="utf-8"?>
<references xmlns="https://github.com/dfan97" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://github.com/dfan97 ../Xsd/common.xsd">
	<reference type="{range-float}" short="{float}">
		<simple entity="min" type="{float}" />
		<simple entity="max" type="{float}" />
	</reference>
	<reference type="{range-int}" short="{int}">
		<simple entity="min" type="{int}" />
		<simple entity="max" type="{int}" />
	</reference>

	<reference type="{resolution-trigger}" short="{resolution}">
		<simple entity="key" type="{resolution}" min="1" />
		<complex entity="trigger" type="{trigger}" />
	</reference>

	<reference type="{resources}">
		<annotation>Resources block</annotation>

		<simple entity="category" type="{economic}">
			<annotation>Economy category that will be affect resourced by related modifiers</annotation>
		</simple>

		<complex entity="cost" max="*">
			<annotation>Resources cost</annotation>

			<simple entity="{resource}" type="{float}" max="*">
				<annotation>Resource</annotation>
			</simple>
			<complex entity="trigger" type="{trigger}">
				<annotation>Conditions to apply this block</annotation>
			</complex>
			<simple entity="multiplier" type="{float}" />
		</complex>
		<complex entity="produces" type=".cost">
			<annotation>Resources production</annotation>
		</complex>
		<complex entity="upkeep" type=".cost">
			<annotation>Resources upkeep</annotation>
		</complex>
	</reference>

	<reference type="{weight}" short="{float}">
		<annotation>Weights block</annotation>
		<!-- возможно:
		
# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1
-->
		<choice>
			<simple entity="base" type="{float}" />
			<simple entity="factor" type="{float}" />
			<simple entity="weight" type="{float}" />
		</choice>
		<complex entity="modifier" max="*">
			<!--TODO: какой-то desc в S:\0_0\Stellaris\common\federation_laws\01_centralization.txt 35 line (возможно, что это из condition, то бишь effect)-->
			<choice min="1">
				<simple entity="add" type="{float}" />
				<simple entity="factor" type="{float}" />
				<simple entity="weight" type="{float}" />
			</choice>
			<complex sequence="only" type="{trigger}" />
		</complex>
		<complex entity="complex_trigger_modifier" max="*">
			<simple entity="trigger" type="{trigger}" min="1" />
			<simple entity="trigger_scope" type="{trigger}" default="this">
				<annotation>Lets you get the result of the trigger on a different scope</annotation>
			</simple>
			<simple entity="parameters" type="@.trigger" />
			<!-- req=true, если триггер имеет -->

			<simple entity="mode" type="{string}" min="1">
				<restriction>
					<enum value="add" />
					<enum value="subtract" />
					<enum value="divide" />
				</restriction>
			</simple>
			<simple entity="mult" type="{float}">
				<annotation>Multiplies the outcome by this</annotation>
			</simple>
		</complex>
	</reference>
	<!-- ship-class
		shipclass_military
    shipclass_military_special
    shipclass_constructor
    shipclass_colonizer
    shipclass_science_ship
    shipclass_transport
    shipclass_starbase
    shipclass_military_station
    shipclass_mining_station
    shipclass_research_station
    shipclass_observation_station -->
	<reference custom="true" type="{color}">
		<simple type="{string}">
			<restriction>
				<enum value="rgb" />
				<enum value="hsv" />
			</restriction>
		</simple>
		<list type="{float}" value-count="3" />
	</reference>

	<reference custom="true" type="{leader-category}">
		<simple type="{string}">
			<restriction>
				<enum value="ruler" />
				<enum value="governor" />
				<enum value="scientist" />
				<enum value="admiral" />
				<enum value="general" />
				<enum value="envoy" />
			</restriction>
		</simple>
	</reference>
</references>